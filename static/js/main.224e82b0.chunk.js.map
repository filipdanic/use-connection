{"version":3,"sources":["logo.png","../../dist/index.es.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","_typeof","Symbol","iterator","obj","constructor","prototype","_extends","Object","assign","target","i","arguments","length","source","key","hasOwnProperty","call","slicedToArray","arr","Array","isArray","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","err","sliceIterator","TypeError","getNetworkInformation","connectionObject","navigator","connection","mozConnection","webkitConnection","getNavigatorConnection","data","networkInformationSupported","downlink","downlinkMax","effectiveType","type","rtt","saveData","index_es","_useState","react","_useState2","setState","network","handleOnline$$1","state","online","since","Date","getTime","handleOnline","handleOffline$$1","handleOffline","onNetworkInformationChange$$1","onNetworkInformationChange","window","addEventListener","onLine","removeEventListener","App","useConnection","react_default","a","createElement","className","src","logo","style","height","marginBottom","alt","JSON","stringify","href","rel","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.224e82b0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ba328b7d.png\";","import { useState, useEffect } from 'react';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar getNavigatorConnection = function getNavigatorConnection() {\n  if ((typeof navigator === 'undefined' ? 'undefined' : _typeof(navigator)) !== 'object') {\n    return undefined;\n  }\n\n  return navigator.connection || navigator.mozConnection || navigator.webkitConnection;\n};\n\nvar getNetworkInformation = function getNetworkInformation() {\n  var connectionObject = getNavigatorConnection();\n\n  if (!connectionObject) {\n    return {\n      data: {\n        networkInformationSupported: false\n      }\n    };\n  } // https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation\n\n\n  var downlink = connectionObject.downlink,\n      downlinkMax = connectionObject.downlinkMax,\n      effectiveType = connectionObject.effectiveType,\n      type = connectionObject.type,\n      rtt = connectionObject.rtt,\n      saveData = connectionObject.saveData;\n  return {\n    data: {\n      networkInformationSupported: true,\n      downlink: downlink,\n      downlinkMax: downlinkMax,\n      effectiveType: effectiveType,\n      type: type,\n      rtt: rtt,\n      saveData: saveData\n    },\n    connectionObject: connectionObject\n  };\n};\n\nvar handleOnline = function handleOnline(setState) {\n  return function () {\n    setState(function (state) {\n      return _extends({}, state, {\n        online: true,\n        since: new Date().getTime()\n      });\n    });\n  };\n};\n\nvar handleOffline = function handleOffline(setState) {\n  return function () {\n    setState(function (state) {\n      return _extends({}, state, {\n        online: false,\n        since: new Date().getTime()\n      });\n    });\n  };\n};\n\nvar onNetworkInformationChange = function onNetworkInformationChange(setState) {\n  return function () {\n    setState(function (state) {\n      return _extends({}, state, getNetworkInformation());\n    });\n  };\n};\n\nvar useConnection = function useConnection() {\n  var _useState = useState(),\n      _useState2 = slicedToArray(_useState, 2),\n      connection = _useState2[0],\n      setState = _useState2[1];\n\n  useEffect(function () {\n    var network = getNetworkInformation();\n    var handleOnline$$1 = handleOnline(setState);\n    var handleOffline$$1 = handleOffline(setState);\n    var onNetworkInformationChange$$1 = onNetworkInformationChange(setState);\n    window.addEventListener('online', handleOnline$$1);\n    window.addEventListener('offline', handleOffline$$1);\n\n    if (network.connectionObject && network.data.networkInformationSupported) {\n      network.connectionObject.addEventListener('change', onNetworkInformationChange$$1);\n    }\n\n    setState(function (state) {\n      return _extends({}, state, {\n        online: navigator.onLine,\n        since: new Date().getTime()\n      }, getNetworkInformation());\n    });\n    return function () {\n      window.removeEventListener('online', handleOnline$$1);\n      window.removeEventListener('offline', handleOffline$$1);\n\n      if (network.connectionObject && network.data.networkInformationSupported) {\n        network.connectionObject.removeEventListener('change', onNetworkInformationChange$$1);\n      }\n    };\n  }, []);\n  return connection;\n};\n\nexport default useConnection;","import React from 'react';\nimport useConnection from 'use-connection';\nimport logo from './logo.png';\n\nconst App = () => {\n  const data = useConnection();\n  return (\n    <div className='card'>\n      <img src={logo} style={{ height: 96, marginBottom: 12 }} alt='' />\n      <img src='https://img.shields.io/npm/v/use-connection.svg' alt='' />\n      <h1>use-connection</h1>\n      <p>A custom React hook that lets you know <mark>if the client is online</mark> as well as <mark>network information such as downlink and type</mark> if it is supported by the browser.</p>\n      <p>Start with:</p>\n      <p><code>npm install --save use-connection</code></p>\n      <p>And in your component just use the hook as:</p>\n      <p><code>const data = useConnection();</code></p>\n      <p>Raw output for your session: </p>\n      <pre>{JSON.stringify(data, null, 2)}</pre>\n      <p>Open up your Browser Tool’s Network tab and play around with Throttling to see these values change!</p>\n      <h2>Docs</h2>\n      <p>What you see above depends highly on your browser. Most browsers will support the basic <mark>online/offline</mark> event listener. Additional network information is taken from <mark>navigator.connection</mark> which is still not supported on all browsers.</p>\n      <h3>Response Properties</h3>\n      <p>The response will always contain three properties:</p>\n      <ul>\n        <li><code>online</code> – boolean, RT info on online status.</li>\n        <li><code>since</code> – timestamp of when the online status was last toggled.</li>\n        <li><code>networkInformationSupported</code> – boolean, true if <mark>NetworkInformation</mark> is available.</li>\n      </ul>\n      <h3>NetworkInformation Properties</h3>\n      <p>If <mark>networkInformationSupported</mark> is <code>true</code>, then you can expect to see:</p>\n      <ul>\n        <li>downlink</li>\n        <li>downlinkMax</li>\n        <li>effectiveType</li>\n        <li>type</li>\n        <li>rtt</li>\n        <li>saveData</li>\n      </ul>\n      <p>Consult the MDN documentation <a href='https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation#Properties' target='_blank' rel='noopener noreferrer'>for NetworkInformation</a> to see what each means.</p>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}